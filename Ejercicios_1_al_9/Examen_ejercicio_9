#include "sapi.h"        // <= Biblioteca sAPI

uint8_t TecladoPinesFilas[4] = {
    RS232_TXD,
    CAN_RD,
    CAN_TD,
    T_COL1,
};

uint8_t TecladoPinesColumnas[4] = {
    T_FIL0,
    T_FIL3,
    T_FIL2,
    T_COL0,
};

#define TECLADO_SCAN 40
#define TECLADO_MOSTRAR 200

void tecladoInit( void );
int8_t escanearTeclado( void );
void cargaValor1(void);     // // para ir formando el valor según lo ingresado por teclado
void mover_servo(uint16_t); // para mover el servo

int valor1=0;       // para almacenar el valor del ángulo

int8_t tecla = -1;
int8_t apretada=0;  // para evitar el rebote de la tecla
int8_t n=0;         // para determinar el ingreso de los dígitos

int8_t conversor[]= {
    1,2,3,'+',
    4,5,6,'-',
    7,8,9,'*',
    15,0,'#','/',-1
};

int main( void )
{
    boardConfig();
    servoConfig( 0, SERVO_ENABLE );
    servoConfig( SERVO4, SERVO_ENABLE_OUTPUT );

    tecladoInit();
    
    delay_t escaneoTeclado;
    delayInit( &escaneoTeclado, TECLADO_SCAN );

    delay_t mostrarTeclado;
    delayInit( &mostrarTeclado, TECLADO_MOSTRAR );
    printf( "Ingrese angulo desde 0 hasta 180: y luego * para mover\r\n" );
    

    while( TRUE ) {
        if( delayRead(&escaneoTeclado) ) {
            tecla = conversor[escanearTeclado()]; // tecla = conversor[16] = -1
        }

        if( delayRead(&mostrarTeclado) ) {
            if(apretada==0) {   
                apretada=1;
                if(( tecla >= 0 )&&( tecla < 10 )) {// entra si se ha presionado algun número
                    if(n<3) {       // para tomar solo 3 dígitos como máximo
                        cargaValor1();
                    }
                }

                if(( tecla == 15 ) && (n > 0)){ // asterisco (15) en el teclado se usa para confirmar el ángulo ingresado
                    mover_servo(valor1);        // n=0 implica que no se ha ingresado valor, por lo tanto no mueve el servo
                }
            }
        }
    }
    return 0;
}

void tecladoInit( void )
{
    uint8_t pin = 0;
    for( pin=0; pin<4; pin++ ) {
        // Se configuran las filas como salidas
        gpioInit( TecladoPinesFilas[pin], GPIO_OUTPUT );
        gpioWrite( TecladoPinesFilas[pin], OFF );
        // Se configuran las columnas como entradas, con resistencias de pull-up internas
        gpioInit( TecladoPinesColumnas[pin], GPIO_INPUT_PULLUP );
    }
}

int8_t escanearTeclado( void )
{
    int8_t indice = 16;
    int8_t fil = 0;
    int8_t col = 0;

    for( fil=0; fil<4; fil++ ) {
        gpioWrite( TecladoPinesFilas[fil], ON ); // se pone a 1 la fila
    }

    for( fil=0; fil<4; fil++ ) {
        gpioWrite( TecladoPinesFilas[fil], OFF ); // se pone a 0 la fila
        for( col=0; col<4; col++ ) {
            if(gpioRead(TecladoPinesColumnas[col])==0) { // chequeo si alguna columna vale 0
                indice = fil*4 + col;
                delay(50);
                return indice;
            }
        }
    }
    apretada = 0;
    return 16;
}

void cargaValor1()
{
    n++;
    switch(n) {
    case 1:                     // un dígito ingresado
        valor1=tecla;
        break;
    case 2:
        valor1=10*valor1+tecla; // dos dígitos ingresados
        break;
    case 3:
        valor1=10*valor1+tecla; // tres dígitos ingresados
        break;
    }
}

void mover_servo(uint16_t val)
{
    if(val <= 180){     // dentro del rango aceptado por el servo    
        servoWrite( SERVO4, val );
    }
    n = 0;
}
